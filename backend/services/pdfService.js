
const puppeteer = require('puppeteer-core');
const chromium = require('@sparticuz/chromium');
const path = require('path');
const fs = require('fs').promises;

const generatePDF = async (htmlContent, filename) => {
  let browser;

  try {
    console.log('üìÑ Starting PDF generation...');
    console.log('üìÑ HTML content length:', htmlContent?.length || 0);
    console.log('üìÑ Filename:', filename);

    // Validate inputs
    if (!htmlContent || htmlContent.trim().length === 0) {
      throw new Error('HTML content is empty or invalid');
    }

    if (!filename) {
      throw new Error('Filename is required');
    }

    // Launch puppeteer with @sparticuz/chromium
    console.log('üìÑ Launching browser...');
    browser = await puppeteer.launch({
      args: [...chromium.args, '--no-sandbox', '--disable-setuid-sandbox'],
      defaultViewport: chromium.defaultViewport,
      executablePath: await chromium.executablePath(),
      headless: chromium.headless,
      timeout: 60000, // 60 second timeout
    });

    console.log('üìÑ Browser launched successfully');
    const page = await browser.newPage();

    // Create styled HTML document with error handling
    const styledHTML = `
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Moving Plan</title>
        <style>
            body {
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                line-height: 1.6;
                color: #333;
                max-width: 800px;
                margin: 0 auto;
                padding: 40px 20px;
                background: #fff;
            }
            h1 {
                color: #2c5530;
                border-bottom: 3px solid #7fb069;
                padding-bottom: 10px;
                margin-bottom: 30px;
                font-size: 28px;
            }
            h2 {
                color: #2c5530;
                margin-top: 35px;
                margin-bottom: 15px;
                font-size: 22px;
            }
            h3 {
                color: #4a7c59;
                margin-top: 25px;
                margin-bottom: 12px;
                font-size: 18px;
            }
            p {
                margin-bottom: 15px;
                text-align: justify;
            }
            ul, ol {
                margin-bottom: 20px;
                padding-left: 25px;
            }
            li {
                margin-bottom: 8px;
            }
            .header {
                text-align: center;
                margin-bottom: 40px;
                padding: 20px;
                background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
                border-radius: 10px;
            }
            .section {
                margin-bottom: 35px;
                padding: 20px;
                border-left: 4px solid #7fb069;
                background: #f8f9fa;
                border-radius: 0 8px 8px 0;
            }
            .cost-item {
                display: flex;
                justify-content: space-between;
                padding: 8px 0;
                border-bottom: 1px solid #dee2e6;
            }
            .timeline-item {
                margin-bottom: 15px;
                padding: 10px;
                background: #fff;
                border-radius: 5px;
                border-left: 3px solid #7fb069;
            }
            .resource-link {
                color: #2c5530;
                text-decoration: none;
                font-weight: 500;
            }
            .footer {
                margin-top: 50px;
                text-align: center;
                font-size: 14px;
                color: #6c757d;
                border-top: 1px solid #dee2e6;
                padding-top: 20px;
            }
        </style>
    </head>
    <body>
        ${htmlContent}
        <div class="footer">
            <p>Generated by New Leaf ‚Ä¢ Visit us at new-leaf.net</p>
        </div>
    </body>
    </html>
    `;

    console.log('üìÑ Setting page content...');
    await page.setContent(styledHTML, { 
      waitUntil: 'networkidle0', 
      timeout: 30000 
    });

    console.log('üìÑ Generating PDF...');
    // Generate PDF with optimized settings
    const pdfBuffer = await page.pdf({
      format: 'A4',
      margin: {
        top: '20mm',
        right: '15mm',
        bottom: '20mm',
        left: '15mm'
      },
      printBackground: true,
      preferCSSPageSize: true,
      timeout: 30000
    });

    console.log('üìÑ PDF buffer generated, size:', pdfBuffer.length);

    // Ensure directories exist
    const tempDir = path.join(__dirname, '..', 'temp');
    const downloadDir = path.join(__dirname, '..', 'downloads');
    
    await fs.mkdir(tempDir, { recursive: true });
    await fs.mkdir(downloadDir, { recursive: true });

    // Save PDF to temp directory
    const pdfPath = path.join(tempDir, filename);
    await fs.writeFile(pdfPath, pdfBuffer);
    console.log('üìÑ PDF saved to temp:', pdfPath);

    // Also save to downloads directory for direct access
    const downloadPath = path.join(downloadDir, filename);
    await fs.writeFile(downloadPath, pdfBuffer);
    console.log('üìÑ PDF saved to downloads:', downloadPath);

    console.log('‚úÖ PDF generated successfully');
    return pdfPath;

  } catch (error) {
    console.error('‚ùå PDF generation error details:');
    console.error('‚ùå Error type:', error.constructor.name);
    console.error('‚ùå Error message:', error.message);
    console.error('‚ùå Error stack:', error.stack);
    
    // More specific error handling
    if (error.message.includes('timeout')) {
      throw new Error('PDF generation timed out - content may be too large or complex');
    } else if (error.message.includes('Navigation')) {
      throw new Error('PDF generation failed during page navigation');
    } else if (error.message.includes('Protocol error')) {
      throw new Error('Browser communication error during PDF generation');
    } else {
      throw new Error(`PDF generation failed: ${error.message}`);
    }
  } finally {
    if (browser) {
      try {
        await browser.close();
        console.log('üìÑ Browser closed successfully');
      } catch (closeError) {
        console.error('‚ùå Error closing browser:', closeError);
      }
    }
  }
};

module.exports = { generatePDF };
